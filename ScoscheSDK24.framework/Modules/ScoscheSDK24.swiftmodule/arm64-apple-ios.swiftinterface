// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScoscheSDK24
import BluetoothMessageProtocol
import CoreBluetooth
import CoreTelephony
import DataDecoder
import Dispatch
import FitnessUnits
import Foundation
@_exported import ScoscheSDK24
import Swift
import UIKit
import UserNotifications
public struct BluetoothServiceUUID {
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythmPlusSerialData : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythmPlusData : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythmPlusArmband : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythm24ValencellFirmware : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythm24UserData : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythm24FitFile : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class ServiceScoscheRhythm24ValencellEXData : BluetoothMessageProtocol.Service {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public static var uniformIdentifier: Swift.String {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String, uuidString: Swift.String, uniformIdentifier: Swift.String)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
final public class CharacteristicScoscheRhythmPlusTotalDistance : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var uuidString: Swift.String {
    get
  }
  final public var totalDistance: Foundation.Measurement<Foundation.UnitLength> {
    get
  }
  public init(totalDistance: Swift.UInt16)
  final public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  final public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusThreeZone : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var lightHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public var moderateHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public init(lightHeartRate: Swift.UInt8, moderateHeartRate: Swift.UInt8)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusStepRateData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var stepRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public init(stepRate: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusSignalQuality : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var quality: Swift.Bool {
    get
  }
  public init(quality: Swift.Bool)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusSerialData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var serialData: Foundation.Data {
    get
  }
  public init(serialData: Foundation.Data)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusParametricData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var parametricData: Foundation.Data {
    get
  }
  public init(parametricData: Foundation.Data)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusKiloCalories : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var kiloCalories: Foundation.Measurement<Foundation.UnitEnergy> {
    get
  }
  public init(kiloCalories: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusHeartRateFilter : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var heartRateFilterLength: Foundation.Measurement<Foundation.UnitDuration> {
    get
  }
  public init(heartRateFilterLength: Swift.UInt8)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusBurnRate : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var kiloCaloriesPerHour: Foundation.Measurement<Foundation.UnitEnergy> {
    get
  }
  public init(kiloCaloriesPerHour: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythm24UserSettings : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public enum GenderType : Swift.UInt8 {
    case female
    case male
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var gender: ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings.GenderType {
    get
  }
  public var ageInMonths: Swift.UInt16 {
    get
  }
  public var weight: Foundation.Measurement<Foundation.UnitMass> {
    get
  }
  public var height: Foundation.Measurement<Foundation.UnitLength> {
    get
  }
  public var restingHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public init(gender: ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings.GenderType, ageInMonths: Swift.UInt16, weight: Foundation.Measurement<Foundation.UnitMass>, height: Foundation.Measurement<Foundation.UnitLength>, restingHr: Swift.UInt8)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythm24SportMode : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public enum SportModeType : Swift.UInt8 {
    case heartRate
    case running
    case cycling
    case swimming
    case duathlon
    case triathlon
    case hrv
    case multiModeSperator
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var mode: ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType {
    get
  }
  public init(mode: ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythm24FiveZoneHr : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var lightHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public var moderateHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public var hardHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public var maximumHeartRate: Foundation.Measurement<FitnessUnits.UnitCadence> {
    get
  }
  public init(lightHeartRate: Swift.UInt8, moderateHeartRate: Swift.UInt8, hardHeartRate: Swift.UInt8, maximumHeartRate: Swift.UInt8)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythm24FitFileInfo : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public enum OpCode : Swift.UInt8 {
    case readInfo
    case eraseFile
    case downloadFile
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum FileResponse : Swift.UInt8 {
    case responseFail
    case ok
    case recordingInProgress
    case downloadInProgress
    case downloadFinished
    case notused
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var fileIndex: Swift.UInt16 {
    get
  }
  public var opCode: ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.OpCode {
    get
  }
  public var response: ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.FileResponse {
    get
  }
  public var rawData: Foundation.Data {
    get
  }
  public init(fileIndex: Swift.UInt16, opCode: ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.OpCode)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythm24FitDirectory : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var header: ScoscheSDK24.FitDirectory {
    get
  }
  public var numberOfFiles: Swift.UInt16 {
    get
  }
  public init(header: ScoscheSDK24.FitDirectory, numberOfFiles: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCSignalData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcSignalData: Swift.UInt16 {
    get
  }
  public init(vdcSignalData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCOpticalData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcOpticalData: Swift.UInt16 {
    get
  }
  public init(vdcOpticalData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCActivityData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcActivityData: Swift.UInt16 {
    get
  }
  public init(vdcActivityData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCHeartRateData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcHeartRateData: Swift.UInt16 {
    get
  }
  public init(vdcHeartRateData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCStepRateData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcStepRateData: Swift.UInt16 {
    get
  }
  public init(vdcStepRateData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCStrideRateData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcStrideRateData: Swift.UInt16 {
    get
  }
  public init(vdcStrideRateData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCDistanceData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcDistanceData: Swift.UInt16 {
    get
  }
  public init(vdcDistanceData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCSpeedData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcSpeedData: Swift.UInt16 {
    get
  }
  public init(vdcSpeedData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCStepsData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcStepsData: Swift.UInt16 {
    get
  }
  public init(vdcStepsData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCCalorieRateData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcCalorieRateData: Swift.UInt16 {
    get
  }
  public init(vdcCalorieRateData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCTotalCaloriesData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcTotalCaloriesData: Swift.UInt16 {
    get
  }
  public init(vdcTotalCaloriesData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCAmbientLightData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcAmbientLightData: Swift.UInt16 {
    get
  }
  public init(vdcAmbientLightData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCACSignalData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcACSignalData: Swift.UInt16 {
    get
  }
  public init(vdcACSignalData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIStatusData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIStatusData: Swift.UInt16 {
    get
  }
  public init(vdcRRIStatusData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRITimestampData : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRITimestampData: Swift.UInt16 {
    get
  }
  public init(vdcRRITimestampData: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister1Data : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIDataRegister1Data: Swift.UInt16 {
    get
  }
  public init(vdcRRIDataRegister1Data: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister2Data : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIDataRegister2Data: Swift.UInt16 {
    get
  }
  public init(vdcRRIDataRegister2Data: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister3Data : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIDataRegister3Data: Swift.UInt16 {
    get
  }
  public init(vdcRRIDataRegister3Data: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister4Data : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIDataRegister4Data: Swift.UInt16 {
    get
  }
  public init(vdcRRIDataRegister4Data: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
open class CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister5Data : BluetoothMessageProtocol.Characteristic {
  public static var name: Swift.String {
    get
  }
  public static var uuidString: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var uuidString: Swift.String {
    get
  }
  public var vdcRRIDataRegister5Data: Swift.UInt16 {
    get
  }
  public init(vdcRRIDataRegister5Data: Swift.UInt16)
  public class func decode<C>(with data: Foundation.Data) -> Swift.Result<C, BluetoothMessageProtocol.BluetoothDecodeError> where C : BluetoothMessageProtocol.Characteristic
  public func encode() -> Swift.Result<Foundation.Data, BluetoothMessageProtocol.BluetoothEncodeError>
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class UserConfig {
  public static let sharedConfig: ScoscheSDK24.UserConfig
  public struct Constant {
    public struct Weight {
      public struct Max {
        public static let pounds: Swift.Int
        public static let kilograms: Swift.Int
      }
      public struct Min {
        public static let pounds: Swift.Int
        public static let kilograms: Swift.Int
      }
    }
    public struct Height {
      public struct Max {
        public static let inches: Swift.Int
        public static let centimeters: Swift.Int
      }
      public struct Min {
        public static let inches: Swift.Int
        public static let centimeters: Swift.Int
      }
    }
  }
  final public var units: ScoscheSDK24.UnitOfMeasurement
  final public var gender: ScoscheSDK24.Gender
  final public var birthDate: Foundation.Date
  final public var heightInInches: Swift.Int {
    get
    set
  }
  final public var heightInCentimeters: Swift.Double {
    get
    set
  }
  final public var weightInPounds: Swift.Int {
    get
    set
  }
  final public var weightInKilograms: Swift.Double {
    get
    set
  }
  final public var heartZoneConfig: ScoscheSDK24.ZoneConfiguration {
    get
    set
  }
  final public var restingHR: Swift.Int
  final public var maxHeartRate: Swift.Int {
    get
    set
  }
  final public var hrZoneOne: Swift.Int
  final public var hrZoneTwo: Swift.Int
  final public var hrZoneThree: Swift.Int
  final public var hrZoneFour: Swift.Int
  final public var threeHrZoneOne: Swift.Int
  final public var threeHrZoneTwo: Swift.Int
  @objc deinit
}
extension UIColor {
  convenience public init(hex: Swift.UInt32, alpha: Swift.Float = 1.0)
  convenience public init(hexString: Swift.String, alpha: Swift.Float = 1.0)
}
extension UIColor {
  public enum ScoscheColor {
    case black
    case modal
    case yellow
    public var colorValue: UIKit.UIColor {
      get
    }
    public enum Text {
      case yellow
      case white
      case inactive
      public var colorValue: UIKit.UIColor {
        get
      }
      public static func == (a: UIKit.UIColor.ScoscheColor.Text, b: UIKit.UIColor.ScoscheColor.Text) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public enum HRZones {
      case hrZone1
      case hrZone2
      case hrZone3
      case hrZone4
      case hrZone5
      public var colorValue: UIKit.UIColor {
        get
      }
      public static func == (a: UIKit.UIColor.ScoscheColor.HRZones, b: UIKit.UIColor.ScoscheColor.HRZones) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public enum SportModes {
      case heartRate
      case running
      case cycling
      case swimming
      case heartRateVariability
      public var colorValue: UIKit.UIColor {
        get
      }
      public static func == (a: UIKit.UIColor.ScoscheColor.SportModes, b: UIKit.UIColor.ScoscheColor.SportModes) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public static func == (a: UIKit.UIColor.ScoscheColor, b: UIKit.UIColor.ScoscheColor) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
public enum UnitOfMeasurement : Swift.String {
  case english
  case metric
  public var intValue: Swift.Int {
    get
  }
  public static func stringArray() -> [Swift.String]
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum Gender : Swift.String {
  case male
  case female
  public var intValue: Swift.Int {
    get
  }
  public static func stringArray() -> [Swift.String]
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ZoneConfiguration : Swift.String {
  case maxHR
  case custom
  public var intValue: Swift.Int {
    get
  }
  public static func stringArray() -> [Swift.String]
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public func delay(_ seconds: Swift.Double, completion: @escaping () -> ())
extension Double {
  public var formattedTimeString: Swift.String {
    get
  }
}
extension Double {
  public var seconds: Foundation.TimeInterval {
    get
  }
  public var second: Foundation.TimeInterval {
    get
  }
  public var minutes: Foundation.TimeInterval {
    get
  }
  public var minute: Foundation.TimeInterval {
    get
  }
  public var hours: Foundation.TimeInterval {
    get
  }
  public var hour: Foundation.TimeInterval {
    get
  }
  public var days: Foundation.TimeInterval {
    get
  }
  public var day: Foundation.TimeInterval {
    get
  }
  public var months: Foundation.TimeInterval {
    get
  }
  public var month: Foundation.TimeInterval {
    get
  }
  public var years: Foundation.TimeInterval {
    get
  }
  public var year: Foundation.TimeInterval {
    get
  }
  public var decades: Foundation.TimeInterval {
    get
  }
  public var decade: Foundation.TimeInterval {
    get
  }
  public var ago: Foundation.Date {
    get
  }
  public var fromNow: Foundation.Date {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SystemState {
  final public let rhythmPlusFrimwareVersion: Swift.String
  final public let rhythm24FrimwareVersion: Swift.String
  public static let sharedState: ScoscheSDK24.SystemState
  final public var connectedDevice: ScoscheSDK24.ScoscheMonitor?
  @objc deinit
}
extension CharacteristicScoscheRhythm24SportMode.SportModeType {
  public var stringValue: Swift.String {
    get
  }
  public var image: UIKit.UIImage {
    get
  }
}
public enum HeartRateZone {
  case zoneOne
  case zoneTwo
  case zoneThree
  case zoneFour
  case zoneFive
  case invalid
  public static func == (a: ScoscheSDK24.HeartRateZone, b: ScoscheSDK24.HeartRateZone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension HeartRateZone {
  public static func zoneFor(heartRate: Swift.Int) -> ScoscheSDK24.HeartRateZone
}
extension HeartRateZone {
  public var stringValue: Swift.String {
    get
  }
}
extension FitFileMetaData {
  public var localModificationDate: Swift.String? {
    get
  }
}
public struct FitFileMetaData {
  public enum FileType : Swift.UInt8 {
    case nonFitFile
    case device
    case settings
    case sport
    case activity
    case workout
    case course
    case schedules
    case weight
    case totals
    case goals
    case bloodPressure
    case monitoringA
    case activitySummary
    case monitoringDaily
    case monitoringB
    case segment
    case segmentList
    case extdConfiguration
    case manufacturing
    case reserved
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public struct FileFlags : Swift.OptionSet {
    public let rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static let reserved: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let reservedOne: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let crypto: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let append: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let archive: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let eraseable: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let writeable: ScoscheSDK24.FitFileMetaData.FileFlags
    public static let readable: ScoscheSDK24.FitFileMetaData.FileFlags
    public typealias Element = ScoscheSDK24.FitFileMetaData.FileFlags
    public typealias ArrayLiteralElement = ScoscheSDK24.FitFileMetaData.FileFlags
    public typealias RawValue = Swift.UInt8
  }
  public var fileIndex: Swift.UInt16 {
    get
  }
  public var fileNumber: Swift.UInt16 {
    get
  }
  public var fileSubType: ScoscheSDK24.FitFileMetaData.FileType {
    get
  }
  public var filePermissions: ScoscheSDK24.FitFileMetaData.FileFlags {
    get
  }
  public var modificationDate: Foundation.Date? {
    get
  }
  public var fileSizeInBytes: Swift.UInt32 {
    get
  }
  public var isFitFile: Swift.Bool {
    get
  }
}
extension FitFileMetaData {
  public static func == (lhs: ScoscheSDK24.FitFileMetaData, rhs: ScoscheSDK24.FitFileMetaData) -> Swift.Bool
}
public struct FitDirectory {
  public enum TimeFormat : Swift.UInt8 {
    case defaultTime
    case sincePowerUp
    case counter
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var version: Swift.UInt8 {
    get
  }
  public var timeFormat: ScoscheSDK24.FitDirectory.TimeFormat {
    get
  }
  public var currentSystemTime: Foundation.Date? {
    get
  }
  public var lastModificationDate: Foundation.Date? {
    get
  }
}
public struct FirmwareBundle {
  public var version: Swift.String {
    get
  }
}
public let IOS11: Swift.Bool
public let IOS10: Swift.Bool
public let IOS9: Swift.Bool
public let IOS8: Swift.Bool
public let IOS7: Swift.Bool
public let IOS6: Swift.Bool
public let IPAD: Swift.Bool
public let IPHONE: Swift.Bool
public let isLandscape: Swift.Bool
public let isPortrait: Swift.Bool
@_hasMissingDesignatedInitializers public class Diagnostics {
  public class var isSimulator: Swift.Bool {
    get
  }
  public class var appBundleName: Swift.String {
    get
  }
  public class var appName: Swift.String {
    get
  }
  public class var appVersion: Swift.String {
    get
  }
  public class var appBuild: Swift.String {
    get
  }
  public class var appIdentifer: Swift.String {
    get
  }
  public class var deviceName: Swift.String {
    get
  }
  @available(OSX, unavailable, message: "Not Available for OSX")
  public class var radioAccessName: Swift.String? {
    get
  }
  @available(OSX, unavailable, message: "Not Available for OSX")
  public class var carrierName: Swift.String {
    get
  }
  public class func OSVerison(_ compare: Swift.Float) -> Swift.Bool
  public typealias SystemVerisonCompletion = (Swift.Bool) -> Swift.Void
  public class func onSystemVerison(sysVersion: Swift.Float, completion: (Swift.Bool) -> Swift.Void)
  public class var systemVersion: Swift.String {
    get
  }
  @objc deinit
}
extension Diagnostics {
  public class var platformString: (device: Swift.String, desciption: Swift.String, number: Swift.Int?) {
    get
  }
}
extension Date {
  public static var antEPOCH: Foundation.Date {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class SchoscheViewController : UIKit.UIViewController {
  public var scanningStarted: Swift.Bool
  public var discoveredMonitors: [ScoscheSDK24.ScoscheMonitor]
  public var monitor: ScoscheSDK24.ScoscheMonitor!
  public var connected: Swift.Bool
  public var sportMode: ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType
  public var heartRate: Swift.Int
  public var restingHeartRate: Swift.Double
  public var signalQuality: Swift.Bool
  public var batteryLevel: Swift.Int
  public var userInfo: ScoscheSDK24.ScoscheUserInfo!
  public var fitFileList: [ScoscheSDK24.FitFileMetaData]
  public var onBluetoothDataUpdate: ((CoreBluetooth.CBUUID) -> Swift.Void)?
  public var onModeChangeAction: ((ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType) -> Swift.Void)?
  public var onModeAutoChangeAction: ((ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType) -> Swift.Void)?
  public var vdcSignal: Swift.Int
  public var vdcOptical: Swift.Int
  public var vdcHeartRate: Swift.Int
  public var vdcSteps: Swift.Int
  public var vdcStepRate: Swift.Int
  public var vdcStrideRate: Swift.Int
  public var vdcDistance: Swift.Int
  public var vdcTotalCalories: Swift.Int
  public var vdcCalorieRate: Swift.Int
  public var vdcACSignal: Swift.Int
  public var vdcSpeed: Swift.Int
  public var vdcAmbientLight: Swift.Int
  public var vdcRRIStatus: Swift.Int
  public var vdcRRITimestamp: Swift.Int
  public var vdcRRIDataRegister1: Swift.Int
  public var vdcRRIDataRegister2: Swift.Int
  public var vdcRRIDataRegister3: Swift.Int
  public var vdcRRIDataRegister4: Swift.Int
  public var vdcRRIDataRegister5: Swift.Int
  open func reloadTableData()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public func ScoscheDeviceConnect(monitor: ScoscheSDK24.ScoscheMonitor, monitorView: ScoscheSDK24.SchoscheViewController)
public func ScoscheDeviceReset()
public func ScoscheDeviceUpdateInfo(monitor: ScoscheSDK24.ScoscheMonitor, userInfo: ScoscheSDK24.ScoscheUserInfo)
public func ScoscheDeviceScan(monitorView: ScoscheSDK24.SchoscheViewController)
public func ScoscheDeviceStopScan(monitorView: ScoscheSDK24.SchoscheViewController)
public func removeBluetoothObservers(monitorView: ScoscheSDK24.SchoscheViewController)
public func setupBluetoothObservers(monitorView: ScoscheSDK24.SchoscheViewController)
public struct ScoscheUserInfo {
  public var name: Swift.String
  public var weight: Swift.Double
  public var height: Swift.Double
  public var restinghr: Swift.Int
  public var maxhr: Swift.Int
  public var dob: Swift.String
  public var age: Swift.Int
  public var gender: Swift.Int
  public var unit: Swift.Int
  public var hrZoneOne: Swift.Int
  public var hrZoneTwo: Swift.Int
  public var hrZoneThree: Swift.Int
  public var hrZoneFour: Swift.Int
}
public func ScoscheGetAgeInMonths(date: Swift.String) -> Swift.Int
public func ScoscheUserInfoRead() -> ScoscheSDK24.ScoscheUserInfo
public func ScoscheUserInfoWrite(userInfo: ScoscheSDK24.ScoscheUserInfo)
public func ScoscheDownloadFitFile(fitMetaData: ScoscheSDK24.FitFileMetaData, fileName: Swift.String, label: UIKit.UILabel, completion: @escaping (Swift.Bool) -> ())
public enum MonitorType : Swift.String {
  case none
  case rhythmPlus
  case rhythm24
  public static func isValidScoscheDevice(_ name: Swift.String) -> Swift.Bool
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ScoscheMonitor : ObjectiveC.NSObject {
  public var batteryCharacteristic: CoreBluetooth.CBCharacteristic?
  public var currentTimeCharacteristic: CoreBluetooth.CBCharacteristic?
  public var r24SportModeChracteristic: CoreBluetooth.CBCharacteristic?
  public var r24UserSettingsChracteristic: CoreBluetooth.CBCharacteristic?
  public var r24FiveZoneHrCharacteristic: CoreBluetooth.CBCharacteristic?
  public var r24FitDirectoryCharacteristic: CoreBluetooth.CBCharacteristic?
  public var r24FitFileCharacteristic: CoreBluetooth.CBCharacteristic?
  public var rPlusZonesCharacteristic: CoreBluetooth.CBCharacteristic?
  public var r24ValencellCharacteristic: CoreBluetooth.CBCharacteristic?
  public enum FITDownloadResponse {
    case success
    case fail
    case recording
    public static func == (a: ScoscheSDK24.ScoscheMonitor.FITDownloadResponse, b: ScoscheSDK24.ScoscheMonitor.FITDownloadResponse) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var deviceName: Swift.String? {
    get
  }
  public var bleConnectionState: CoreBluetooth.CBPeripheralState {
    get
  }
  public var manufacturerName: BluetoothMessageProtocol.CharacteristicManufacturerNameString? {
    get
    set
  }
  public var serialNumber: Swift.String? {
    get
  }
  public var softwareRevision: BluetoothMessageProtocol.CharacteristicSoftwareRevisionString? {
    get
    set
  }
  public var signalQuality: ScoscheSDK24.CharacteristicScoscheRhythmPlusSignalQuality? {
    get
    set
  }
  public var batteryInformation: BluetoothMessageProtocol.CharacteristicBatteryLevel? {
    get
    set
  }
  public var heartRateInformation: BluetoothMessageProtocol.CharacteristicHeartRateMeasurement? {
    get
    set
  }
  public var heartRate: FitnessUnits.ValidatedMeasurement<FitnessUnits.UnitCadence>?
  public var r24SportMode: ScoscheSDK24.CharacteristicScoscheRhythm24SportMode? {
    get
    set
  }
  public var r24UserData: ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings?
  public var r24FiveZoneHr: ScoscheSDK24.CharacteristicScoscheRhythm24FiveZoneHr?
  public var r24FitFileDirectory: ScoscheSDK24.CharacteristicScoscheRhythm24FitDirectory? {
    get
    set
  }
  public var r24FitFileInfo: ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo?
  public var r24ValencellInfo: [Swift.String : Any]
  public var fitFiles: [ScoscheSDK24.FitFileMetaData]
  public var onFitFileMetaDataUpdate: (([ScoscheSDK24.FitFileMetaData]) -> Swift.Void)?
  public init(peripheral: CoreBluetooth.CBPeripheral)
  @objc deinit
  public var VDCSignal: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCSignalData? {
    get
    set
  }
  public var VDCOptical: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCOpticalData? {
    get
    set
  }
  public var VDCActivity: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCActivityData? {
    get
    set
  }
  public var VDCHeartRate: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCHeartRateData? {
    get
    set
  }
  public var VDCStepRate: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCStepRateData? {
    get
    set
  }
  public var VDCStrideRate: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCStrideRateData? {
    get
    set
  }
  public var VDCDistance: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCDistanceData? {
    get
    set
  }
  public var VDCSpeed: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCSpeedData? {
    get
    set
  }
  public var VDCSteps: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCStepsData? {
    get
    set
  }
  public var VDCCalorieRate: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCCalorieRateData? {
    get
    set
  }
  public var VDCTotalCalories: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCTotalCaloriesData? {
    get
    set
  }
  public var VDCAmbientLight: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCAmbientLightData? {
    get
    set
  }
  public var VDCACSignal: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCACSignalData? {
    get
    set
  }
  public var VDCRRIStatus: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIStatusData? {
    get
    set
  }
  public var VDCRRITimestamp: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRITimestampData? {
    get
    set
  }
  public var VDCRRIDataRegister1: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister1Data? {
    get
    set
  }
  public var VDCRRIDataRegister2: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister2Data? {
    get
    set
  }
  public var VDCRRIDataRegister3: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister3Data? {
    get
    set
  }
  public var VDCRRIDataRegister4: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister4Data? {
    get
    set
  }
  public var VDCRRIDataRegister5: ScoscheSDK24.CharacteristicScoscheRhythmPlusValencellVDCRRIDataRegister5Data? {
    get
    set
  }
  @objc override dynamic public init()
}
extension ScoscheMonitor {
  public func setR19Zones(zones: ScoscheSDK24.CharacteristicScoscheRhythmPlusThreeZone)
}
extension ScoscheMonitor {
  public func setSportMode(mode: ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType)
  public func setR24UserSettings(settings: ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings, hrZones: ScoscheSDK24.CharacteristicScoscheRhythm24FiveZoneHr)
}
extension ScoscheMonitor {
  public func readR24FitDirectory()
  public func readR24FitFile(index: Swift.UInt16)
  public func deleteR24File(file: ScoscheSDK24.FitFileMetaData)
}
extension ScoscheMonitor {
  public func connect()
  public func disconnect()
  public func readBatteryLevel()
}
extension ScoscheMonitor : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverDescriptorsFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
extension ScoscheMonitor {
  public func decodeRhythm24SportMode(sensorData: Foundation.Data)
  public func decodeRhythm24UserData(sensorData: Foundation.Data)
  public func decodeRhythm24FiveZoneHrData(sensorData: Foundation.Data)
  public func decodeRhythm24FitDirectoryData(sensorData: Foundation.Data)
  public func decodeRhythm24FitFileData(sensorData: Foundation.Data)
  public func processDownloadFileOpCode(file: ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo)
}
extension ScoscheMonitor {
  public func reReadAfterErase()
  public func updateLastSeen()
  public func readMonitorData(characteristic: CoreBluetooth.CBCharacteristic)
  public func sendData(data: Foundation.Data, characteristic: CoreBluetooth.CBCharacteristic, after: Dispatch.DispatchTimeInterval = .seconds(0), writeType: CoreBluetooth.CBCharacteristicWriteType = .withResponse)
  public func asyncWriteWithResponse(data: Foundation.Data, characteristic: CoreBluetooth.CBCharacteristic)
}
public enum CentralDiscoveryState {
  case deviceAdded
  case deviceRemoved
  public static func == (a: ScoscheSDK24.CentralDiscoveryState, b: ScoscheSDK24.CentralDiscoveryState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum CentralConnectivityState {
  case deviceConnected
  case deviceDisconnected
  public static func == (a: ScoscheSDK24.CentralConnectivityState, b: ScoscheSDK24.CentralConnectivityState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings.GenderType : Swift.Equatable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings.GenderType : Swift.Hashable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24UserSettings.GenderType : Swift.RawRepresentable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType : Swift.Equatable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType : Swift.Hashable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24SportMode.SportModeType : Swift.RawRepresentable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.OpCode : Swift.Equatable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.OpCode : Swift.Hashable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.OpCode : Swift.RawRepresentable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.FileResponse : Swift.Equatable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.FileResponse : Swift.Hashable {}
@available(swift 3.1)
@available(iOS 10.0, tvOS 10.0, watchOS 3.0, OSX 10.12, *)
extension ScoscheSDK24.CharacteristicScoscheRhythm24FitFileInfo.FileResponse : Swift.RawRepresentable {}
extension UIKit.UIColor.ScoscheColor : Swift.Equatable {}
extension UIKit.UIColor.ScoscheColor : Swift.Hashable {}
extension UIKit.UIColor.ScoscheColor.Text : Swift.Equatable {}
extension UIKit.UIColor.ScoscheColor.Text : Swift.Hashable {}
extension UIKit.UIColor.ScoscheColor.HRZones : Swift.Equatable {}
extension UIKit.UIColor.ScoscheColor.HRZones : Swift.Hashable {}
extension UIKit.UIColor.ScoscheColor.SportModes : Swift.Equatable {}
extension UIKit.UIColor.ScoscheColor.SportModes : Swift.Hashable {}
extension ScoscheSDK24.UnitOfMeasurement : Swift.Equatable {}
extension ScoscheSDK24.UnitOfMeasurement : Swift.Hashable {}
extension ScoscheSDK24.UnitOfMeasurement : Swift.RawRepresentable {}
extension ScoscheSDK24.Gender : Swift.Equatable {}
extension ScoscheSDK24.Gender : Swift.Hashable {}
extension ScoscheSDK24.Gender : Swift.RawRepresentable {}
extension ScoscheSDK24.ZoneConfiguration : Swift.Equatable {}
extension ScoscheSDK24.ZoneConfiguration : Swift.Hashable {}
extension ScoscheSDK24.ZoneConfiguration : Swift.RawRepresentable {}
extension ScoscheSDK24.HeartRateZone : Swift.Equatable {}
extension ScoscheSDK24.HeartRateZone : Swift.Hashable {}
extension ScoscheSDK24.FitFileMetaData.FileType : Swift.Equatable {}
extension ScoscheSDK24.FitFileMetaData.FileType : Swift.Hashable {}
extension ScoscheSDK24.FitFileMetaData.FileType : Swift.RawRepresentable {}
extension ScoscheSDK24.FitDirectory.TimeFormat : Swift.Equatable {}
extension ScoscheSDK24.FitDirectory.TimeFormat : Swift.Hashable {}
extension ScoscheSDK24.FitDirectory.TimeFormat : Swift.RawRepresentable {}
extension ScoscheSDK24.MonitorType : Swift.Equatable {}
extension ScoscheSDK24.MonitorType : Swift.Hashable {}
extension ScoscheSDK24.MonitorType : Swift.RawRepresentable {}
extension ScoscheSDK24.ScoscheMonitor.FITDownloadResponse : Swift.Equatable {}
extension ScoscheSDK24.ScoscheMonitor.FITDownloadResponse : Swift.Hashable {}
extension ScoscheSDK24.CentralDiscoveryState : Swift.Equatable {}
extension ScoscheSDK24.CentralDiscoveryState : Swift.Hashable {}
extension ScoscheSDK24.CentralConnectivityState : Swift.Equatable {}
extension ScoscheSDK24.CentralConnectivityState : Swift.Hashable {}
